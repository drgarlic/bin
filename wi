#!/usr/bin/env bash
#
#  ||  | '||'
#  ||  |  || 
#  ||/\| .||.
#
# Description:              A minimal wifi manager
# Dependencies:             dhcpcd, ip, iw, log, pure, tr, wpa_supplicant
# Optionnal dependencies:   macchanger, notf
# Author:                   gawlk
# Contributors:             none

# ---
# IMPORTS
# ---

. log
. pure

# ---
# SETUP
# ---

dir="${HOME}/.config/wpa_supplicant"
mkdir -p "$dir"
conf="${dir}/wi.conf"

card=( $( pure.split "$( ip link | grep "2:" )" " " ) )
card="$( pure.rstrip "${card[1]}" ":" )"

ssid=( $( pure.split "$( iw dev ${card} link | grep "SSID" )" " " ) )
ssid="${ssid[1]}"

# ---
# MAIN
# ---

wi.main() {
    case "$1" in
        "add" )
            printf '%s\n' "Enter the SSID:"
            read ssid
            [[ -z "$ssid" ]] && log.error "wi" "The SSID cannot be empty."

            [[ -n "$( grep "ssid=\"$ssid\"" < $conf )" ]] && log.error "wi" "A network with this name is already present in the list."

            printf '%s\n' "Enter the passphrase (leave empty if open network):"
            read passphrase

            printf '%s\n' "Enter the priority (leave empty for default):"
            read priority

            [[ -n "$passphrase" ]] && passphrase="$( pure.trim_all "$( wpa_passphrase "$ssid" "$passphrase" | grep "[^#]psk" )" )"

            printf '%s\n' "network={" >> "$conf"
            printf '%s\n' "    ssid=\"${ssid}\"" >> "$conf"
            printf '%s\n' "    scan_ssid=1" >> "$conf"
            [[ -n "$passphrase" ]] && printf '%s\n' "    ${passphrase}" >> "$conf" || printf '%s\n' "    key_mgmt=NONE" >> "$conf"
            [[ -n "$priority" ]] && printf '%s\n' "    priority=${priority}" >> "$conf" || \
                ( [[ -z "$passphrase" ]] && printf '%s\n' "    priority=-666" >> "$conf" )
            printf '%s\n' "}" >> "$conf"

            log.info "wi" "Network successfuly added to the list."
        ;;
        "help" )
            printf '\n%s\n\n'   "wi - A minimal wifi manager"

            printf '%s\n'     "Arguments:"
            printf '%s\n'     "(none)       Redirect to \"help\""
            printf '%s\n'     "add          Add a network to the list"
            printf '%s\n'     "help         Display this menu"
            printf '%s\n'     "info         Display the current status of your wifi connection"
            printf '%s\n'     "list         Diplay a list of saved networks"
            printf '%s\n'     "off          Stop your wifi connection"
            printf '%s\n'     "on           Start your wifi connection"
            printf '%s\n'     "remove       Remove a network from the list"
            printf '%s\n\n'   "restart      Restart your wifi connection"
        ;;
        "info" )
            if [[ -n "$ssid" ]]
            then
                local message="Wifi: connected to ${ssid}"
                notf "$message" &> /dev/null || printf '%s\n' "$message"
            elif [[ -n "$( ps aux | grep "wpa_supplicant" )" ]] 
            then
                notf "Wifi: on but not connected" &> /dev/null || printf '%s\n' "Wifi: off"
            else
                notf "Wifi: off" &> /dev/null || printf '%s\n' "Wifi: off"
            fi
        ;;
        "list" )
            printf '\n%s\n' "List of networks:"
            grep -Po "(?<=    ssid=\")(.*)(?=\")" < $conf
            printf '\n'
        ;;
        "off" )
            sudo true

            log.info "wi" "Stopping wpa_supplicant..."
            sudo killall wpa_supplicant &> /dev/null

            log.info "wi" "Stopping dhcpcd..."
            sudo dhcpcd -k "$card" &> /dev/null
        ;;
        "on" )
            [ -n "$ssid" ] && log.quit "wi" "Wifi already on"

            sudo true

            log.info "wi" "Spoofing the mac address..."
            sudo macchanger -r "$card" &> /dev/null

            log.info "wi" "Starting wpa_supplicant..."
            sudo wpa_supplicant -B -i "$card" -c "${conf}" &> /dev/null

            log.info "wi" "Starting dhcpcd..."
            sudo dhcpcd "$card" &> /dev/null
        ;;
        "remove" )
            printf '%s\n' "Enter the SSID:"
            read ssid

            grep -Pazo 'network={\n *ssid="(?!'${ssid}').*"\n.*\n(.*\n)?(.*\n)?}\n' < $conf > /tmp/wi.conf
            tr < /tmp/wi.conf -d '\000' > /tmp/wi.conf
            mv /tmp/wi.conf $conf

            log.info "wi" "Network successfuly removed from the list."
        ;;
        "restart" )
            wi off

            sleep 0.2

            wi on
        ;;
        "" )
            wi help
        ;;
        * )
            log.error "wi" "Wrong argument, please try again."
        ;;
    esac
}

# ---
# LAUNCH
# ---

wi.main "$1"
